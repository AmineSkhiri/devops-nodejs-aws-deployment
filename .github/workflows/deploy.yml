name: Deploy to AWS ECS & EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: üîê Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üê≥ Build and Push Docker image to ECR
        env:
          ECR_REGISTRY: 890742601773.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: devops-nodejs-app
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: üöÄ Deploy to ECS (Fargate)
        run: |
          aws ecs update-service \
            --cluster nodejs-cluster \
            --service node-service \
            --force-new-deployment \
            --region us-east-1

      - name: ‚öôÔ∏è Update kubeconfig
        run: aws eks update-kubeconfig --region us-east-1 --name nodejs-eks-cluster

      - name: ‚ò∏Ô∏è Deploy to EKS
        run: |
          kubectl apply -f infrastructure/k8s/deployment.yaml
          kubectl apply -f infrastructure/k8s/service.yaml

      - name: üåê Output Load Balancer URLs
        run: |
          echo "ECS Load Balancer:"
          echo "http://nodejs-app-lb-7780150.us-east-1.elb.amazonaws.com"

          echo "EKS Load Balancer:"
          kubectl get svc nodejs-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
